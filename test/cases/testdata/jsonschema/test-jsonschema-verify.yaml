cases:
  - note: jsonschema_verify/valid schema string
    modules:
      - |
        package test
        
        schema := `{"type": "boolean"}`
        p := jsonschema.verify(schema)
    query: data.test.p = x
    want_result:
      - x: [ true, null ]
  - note: jsonschema_verify/valid schema object
    modules:
      - |
        package test
        
        schema := {"type": "boolean"}
        p := jsonschema.verify(schema)
    query: data.test.p = x
    want_result:
      - x: [ true, null ]
  - note: jsonschema_verify/invalid schema string
    modules:
      - |
        package test

        schema := `{"type": "unknown_type"}`
        p := jsonschema.verify(schema)
    query: data.test.p = x
    want_result:
      - x: [ false, "jsonschema: has a primitive type that is NOT VALID -- given: /unknown_type/ Expected valid values are:[array boolean integer number null object string]" ]
  - note: jsonschema_verify/invalid schema object
    modules:
      - |
        package test

        schema := {"type": "unknown_type"}
        p := jsonschema.verify(schema)
    query: data.test.p = x
    want_result:
      - x: [ false, "jsonschema: has a primitive type that is NOT VALID -- given: /unknown_type/ Expected valid values are:[array boolean integer number null object string]" ]